// <auto-generated />
using System;
using MathTrainer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MathTrainer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MathTrainer.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("MathTrainer.Models.CourseProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CertificateIssued")
                        .HasColumnType("boolean");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EasyTestPassed")
                        .HasColumnType("boolean");

                    b.Property<bool>("HardTestPassed")
                        .HasColumnType("boolean");

                    b.Property<bool>("MediumTestPassed")
                        .HasColumnType("boolean");

                    b.Property<int>("ProgressPercent")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CourseProgresses");
                });

            modelBuilder.Entity("MathTrainer.Models.ExamAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttemptsUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastAttempt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExamAttempts");
                });

            modelBuilder.Entity("MathTrainer.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorrectAnswer = "3",
                            Level = "easy",
                            Options = "5;4;3",
                            Text = "11x = 36"
                        },
                        new
                        {
                            Id = 2,
                            CorrectAnswer = "4",
                            Level = "easy",
                            Options = "4;3;-2",
                            Text = "9x + 4 = 48 - 2x"
                        },
                        new
                        {
                            Id = 3,
                            CorrectAnswer = "0",
                            Level = "easy",
                            Options = "1;0;5",
                            Text = "6x + 2 = 2 - 4x"
                        },
                        new
                        {
                            Id = 4,
                            CorrectAnswer = "-6",
                            Level = "medium",
                            Options = "-6;-3;-12",
                            Text = "2(x - 3) = 4x + 6"
                        },
                        new
                        {
                            Id = 5,
                            CorrectAnswer = "2",
                            Level = "medium",
                            Options = "2;-2;0",
                            Text = "x² - 4x + 4 = 0"
                        },
                        new
                        {
                            Id = 6,
                            CorrectAnswer = "-3 и 2",
                            Level = "medium",
                            Options = "-3 и 2;-2 и 3;-1 и 6",
                            Text = "x² + x - 6 = 0"
                        },
                        new
                        {
                            Id = 7,
                            CorrectAnswer = "x=3, y=2",
                            Level = "hard",
                            Options = "x=3, y=2;x=2, y=3;x=1, y=4",
                            Text = "Решите систему: x + y = 5, x - y = 1"
                        },
                        new
                        {
                            Id = 8,
                            CorrectAnswer = "16",
                            Level = "hard",
                            Options = "16;25;5",
                            Text = "Найдите корень: √(x + 9) = 5"
                        },
                        new
                        {
                            Id = 9,
                            CorrectAnswer = "4",
                            Level = "hard",
                            Options = "2;4;8",
                            Text = "Решите: 2^(x) = 16"
                        },
                        new
                        {
                            Id = 10,
                            CorrectAnswer = "5",
                            Level = "exam",
                            Options = "5;3;7",
                            Text = "x + 2 = 7"
                        },
                        new
                        {
                            Id = 11,
                            CorrectAnswer = "1",
                            Level = "exam",
                            Options = "1;-1;0",
                            Text = "x² - 1 = 0"
                        });
                });

            modelBuilder.Entity("MathTrainer.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("MathTrainer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExamProgress")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MathTrainer.Models.CourseProgress", b =>
                {
                    b.HasOne("MathTrainer.Models.User", "User")
                        .WithMany("CourseProgresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CourseProgresses_Users_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MathTrainer.Models.ExamAttempt", b =>
                {
                    b.HasOne("MathTrainer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ExamAttempts_Users_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MathTrainer.Models.Question", b =>
                {
                    b.HasOne("MathTrainer.Models.Course", "Course")
                        .WithMany("Questions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Questions_Courses_CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MathTrainer.Models.Result", b =>
                {
                    b.HasOne("MathTrainer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Results_Users_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MathTrainer.Models.Course", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("MathTrainer.Models.User", b =>
                {
                    b.Navigation("CourseProgresses");
                });
#pragma warning restore 612, 618
        }
    }
}
